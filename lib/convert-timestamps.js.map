{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/convert-timestamps.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\n# njs_util                  = require 'util'\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'convert-timestamps'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Moonriver }             = require 'moonriver'\n{ $ }                     = Moonriver\nPATH                      = require 'node:path'\nFS                        = require 'node:fs'\nDAYJS                     = require 'dayjs'\nread_from_stdin           = not process.stdin.isTTY\n\n#-----------------------------------------------------------------------------------------------------------\ndemo = ->\n  collector = []\n  mr        = new Moonriver()\n  first     = Symbol 'first'\n  last      = Symbol 'last'\n  #.........................................................................................................\n  # mr.push show              = ( line ) -> whisper rpr line\n  #.........................................................................................................\n  mr.push convert_to_object = ( line, send ) -> send { lnr: @call_count, line, }\n  #.........................................................................................................\n  mr.push parse_line        = ( d, send ) ->\n    return send d unless ( match = d.line.match /^:\\s+(?<timestamp>\\d+):\\d+;(?<cmd>.*$)/ )?\n    send { d..., match.groups..., }\n  #.........................................................................................................\n  mr.push parse_timestamp   = ( d, send ) ->\n    return send d unless d.timestamp?\n    send { d..., date: ( ( DAYJS.unix d.timestamp ).format 'YYYY-MM-DD HH:mm' ) }\n  #.........................................................................................................\n  mr.push show              = ( d ) ->\n    echo ( GUY.trm.steel d.lnr ), ( GUY.trm.gold d.date ), GUY.trm.white d.cmd\n  #.........................................................................................................\n  if read_from_stdin\n    source  = process.stdin\n    { readlines }   = require 'readlines-ng'\n    #.......................................................................................................\n    count         = 0\n    for await line from readlines process.stdin\n      count++\n      # continue if count > 5\n      mr.send line\n      ### to achieve interleaving of data ingestion steps and data processing steps use `sleep 0`; ###\n      await GUY.async.sleep 0\n  #.........................................................................................................\n  else\n    ### TAINT get path from process.argv ###\n    path    = PATH.join __dirname, '../../../.zsh_history'\n    source  = GUY.fs.walk_lines path\n  # #.........................................................................................................\n  # mr.drive()\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  await demo()\n"
  ]
}